{"version":3,"file":"index.js","sources":["../src/logic/isEmpty.ts","../src/logic/isArray.ts","../src/builtIn/builtIns.ts","../src/logic/checkValidators.ts","../src/logic/isRadio.ts","../src/logic/isCheckbox.ts","../src/logic/getValue.ts","../src/logic/getHierarchyProperties.ts","../src/logic/throwWarning.ts","../src/logic/hasKey.ts","../src/index.ts","../src/logic/isEmptyValue.ts","../src/logic/hasNameAttribute.ts"],"sourcesContent":["export const isEmpty = (o: object): boolean => {\n  if (Array.isArray(o)) {\n    return !o.length\n  }\n  return Object.keys(o).length === 0 && o.constructor === Object\n}\n","export const isArray = (a: any) => Array.isArray(a)\n","import { isEmpty } from '../logic/isEmpty'\nimport { isArray } from '../logic/isArray'\n\nexport default {\n  required: <T>(value: T): boolean => {\n    if (typeof value === 'string') {\n      return (value as string).trim().length > 0\n    }\n    if (typeof value === 'number') {\n      return !!value\n    }\n    if (\n      value &&\n      typeof value === 'object' &&\n      !isEmpty((value as unknown) as object)\n    ) {\n      return true\n    }\n    return false\n  },\n  email: (input: string): boolean =>\n    /^\\w+([-]?\\w+)*@\\w+([-]?\\w+)*(\\.\\w{2,3})+$/.test(input),\n  minLength: (input: string, len: number): boolean => {\n    if (!len) {\n      console.warn('length is not provided')\n    }\n    return input.toString().length >= len\n  },\n  maxLength: (input: string, len: number): boolean => {\n    if (!len) {\n      console.warn('length is not provided')\n    }\n    return input.toString().length <= len\n  },\n  minCheckboxes: (input: any, availableOptions: any = null) => {\n    if (\n      typeof input === 'object' &&\n      isArray(input) &&\n      availableOptions &&\n      typeof availableOptions === 'number'\n    ) {\n      return (input as []).length >= availableOptions\n    }\n    return false\n  }\n}\n","import { Config } from '../types/configuration'\nimport { Rules } from '../types/fields'\n\nconst checkForValidators = (\n  configValidators: Config | null,\n  builtInValidators: any,\n  name: string,\n  rules?: Rules\n) => {\n  if (rules?.customValidators?.[name]) {\n    return rules.customValidators[name]\n  }\n  if (configValidators?.[name]) {\n    return configValidators[name]\n  }\n  if (builtInValidators[name]) {\n    return builtInValidators[name]\n  } else {\n    console.warn(`no validation function with mane ${name}`)\n  }\n}\n\nexport const getValidators = (\n  configValidators: Config | null,\n  builtInValidators: object,\n  rules?: Rules\n) => {\n  if (!rules) return\n  const f = {}\n  for (const key in rules?.rules) {\n    const t = checkForValidators(\n      configValidators,\n      builtInValidators,\n      key,\n      rules\n    )\n    if (t) {\n      f[key] = t\n    }\n  }\n  return f\n}\n","import { Basic } from '../types/fields'\n\nexport const isRadio = (ref: Basic) => ref.type === 'radio'\n","import { Basic } from '../types/fields'\n\nexport const isCheckbox = (ref: Basic) => ref.type === 'checkbox'\n","import { isArray } from './isArray'\nimport { DataField } from '../types/fields'\nimport { isEmpty } from './isEmpty'\n\nexport const getValue = (v: DataField): [] | any | null => {\n  if (v.type === 'checkbox' || v.type === 'radio') {\n    if (!v.ref) {\n      if (!isEmpty(v.group!) && isArray(v.group)) {\n        return (v.group as React.MutableRefObject<HTMLInputElement>[])\n          .filter((e) => e.current.checked)\n          .map((e) => e.current.value)\n      }\n    } else {\n      if (\n        v.ref.current &&\n        (v.ref as React.MutableRefObject<HTMLInputElement>).current.checked\n      ) {\n        return v.ref.current.value\n      } else {\n        return null\n      }\n    }\n  }\n\n  if (v.ref.current) {\n    return v.ref.current.value\n  }\n\n  return null\n}\n","export const getHierarchyProperties = (\n  inputOptions: any = null,\n  globalOptions: any = null,\n  key: string\n) => inputOptions?.[key] || globalOptions?.[key] || undefined\n","export const throwWarning = <T>(value: T) => (warning: string): T => {\n  if (!value) console.warn(warning)\n  return value\n}\n","export const hasKey = (obj: object, key: string): boolean => {\n  return obj && key in obj\n}\n","import { useRef, useState, createRef, RefObject, useEffect } from 'react'\nimport builtInValidators from './builtIn/builtIns'\nimport { Config, UseValidator } from './types/configuration'\nimport { DataField, Rules, Basic } from './types/fields'\nimport { getValidators } from './logic/checkValidators'\nimport { hasNameAttribute } from './logic/hasNameAttribute'\nimport { isRadio } from './logic/isRadio'\nimport { isEmpty } from './logic/isEmpty'\nimport { isCheckbox } from './logic/isCheckbox'\nimport { getValue } from './logic/getValue'\nimport { isEmptyValue } from './logic/isEmptyValue'\nimport { getHierarchyProperties } from './logic/getHierarchyProperties'\nimport { throwWarning } from './logic/throwWarning'\nimport { hasKey } from './logic/hasKey'\n\nexport const useValidator = (config?: Config): UseValidator => {\n  const elements = useRef<Map<string, DataField>>(new Map())\n  const touchedElements = useRef(new Map())\n  const dirtyElements = useRef(new Map())\n  const errors = useRef({})\n  const triedToSubmit = useRef(false)\n  const formValidity = useRef(true)\n  const shouldRerender = useRef(false)\n  const [, rerender] = useState()\n\n  const submitForm = (fn?: Function) => (e: Event) => {\n    e.preventDefault()\n    const prevFormValidity = formValidity.current\n    if (elements.current.size !== dirtyElements.current.size) {\n      dirtyElements.current = new Map(elements.current)\n    }\n    elements.current.forEach((value: DataField) => {\n      fieldValidation(value)\n    })\n    triedToSubmit.current = true\n\n    if (formValidity.current !== prevFormValidity) {\n      rerender({})\n      return\n    }\n    fn && fn(e)\n  }\n\n  useEffect(() => {\n    elements.current.forEach((value: DataField) => {\n      const val = getValue(value)\n      if (isEmptyValue(val)) return\n      fieldValidation(value)\n    })\n  }, [])\n\n  const fieldValidation = (elem: DataField): void => {\n    let _isValid = true\n    const previousErrorState = { ...errors.current }\n    const { fieldRules, validators, name } =\n      elements.current.get(elem.name!) || {}\n    const { rules, messages, options } = fieldRules || {}\n\n    if (rules && name) {\n      for (const key in validators) {\n        const validator = validators[key]\n        const availableOptions = getHierarchyProperties(\n          options,\n          config?.globalOptions,\n          key\n        )\n        const value = getValue(elem)\n        if (rules[key] && !validator(value, availableOptions)) {\n          _isValid = false\n          if (hasKey(errors.current?.[name], key)) continue\n          shouldRerender.current = true\n          const errorMsg = throwWarning(\n            getHierarchyProperties(messages, config?.globalMessages, key)\n          )(`no @ ${key} error message anywhere for ${name} input.`)\n          // TODO: with below code is not working properly.\n          // if (!errorMsg) return\n\n          errors.current[name] = errors.current[name] || {}\n          errors.current[name][key] = errorMsg\n          elements.current.set(name, {\n            ...(elements.current.get(name) as DataField),\n            valid: false\n          })\n        } else {\n          if (!errors.current?.[name]?.[key]) continue\n          shouldRerender.current = true\n          delete errors.current?.[name]?.[key]\n          if (!isEmpty(errors?.current) && isEmpty(errors?.current?.[name])) {\n            isEmpty(errors.current?.[name]) && delete errors.current?.[name]\n            errors.current = { ...errors.current }\n            elements.current.set(name, {\n              ...(elements.current.get(name) as DataField),\n              valid: true\n            })\n          }\n        }\n      }\n    }\n    if (!_isValid) {\n      formValidity.current = false\n    }\n\n    if (isEmpty(errors.current) && !isEmpty(previousErrorState)) {\n      shouldRerender.current = true\n      formValidity.current = true\n    }\n\n    if (shouldRerender.current) {\n      shouldRerender.current = false\n      rerender({})\n    }\n  }\n\n  const detectInput = (ref: RefObject<Basic>) => (e: Event) => {\n    e.stopPropagation()\n    const name = ref.current?.name\n    if (!dirtyElements.current.has(ref.current)) {\n      dirtyElements.current.set(ref.current, null)\n    }\n    if (!triedToSubmit.current && config?.validateFormOnSubmit) return\n    const t = elements.current.get(name!)\n    fieldValidation(t!)\n  }\n\n  const detectChange = (ref: RefObject<Basic>) => (e: Event) => {\n    e.stopPropagation()\n    if (!triedToSubmit.current && config?.validateFormOnSubmit) return\n    const name = ref.current?.name\n    const t = ref.current && elements.current.get(name!)\n    fieldValidation(t!)\n  }\n\n  const track = (elem: Basic, rules?: Rules): void => {\n    if (!elem) return\n\n    const ref = createRef<Basic>()\n    ;(ref as React.MutableRefObject<Basic>).current = elem\n    const name = hasNameAttribute(ref.current!)\n    if (!name) return\n    const isRadioOrCheckbox = isRadio(ref.current!) || isCheckbox(ref.current!)\n    const e = elements.current.get(name)\n    // TODO: this needs refactoring yesterday\n    if (\n      !elements.current.has(name) ||\n      !(e?.group && e.group.some((elem) => elem.current === ref.current))\n    ) {\n      if (\n        isRadio(ref.current!) ||\n        isCheckbox(ref.current!) ||\n        ref.current?.type === 'range'\n      ) {\n        ref.current && ref.current.addEventListener('change', detectChange(ref))\n      } else {\n        ref.current && ref.current.addEventListener('focus', detectTouch(ref))\n        ref.current && ref.current.addEventListener('input', detectInput(ref))\n      }\n    }\n\n    const validators = getValidators(\n      config?.customValidators,\n      builtInValidators,\n      rules\n    )\n\n    const dataFields: DataField = elements.current.get(name) || {\n      valid: true,\n      ...(rules && { fieldRules: rules }),\n      ...(validators && { validators }),\n      type: ref.current?.type,\n      name: name,\n      ...(isRadioOrCheckbox && { checked: false }),\n      ...(isRadioOrCheckbox && { group: [] }),\n      ref\n    }\n    if (elements.current.has(name)) {\n      if (dataFields.ref && dataFields.group) {\n        dataFields.group.push(dataFields.ref)\n      }\n      if (\n        dataFields.group &&\n        // TODO: refactor this\n        !dataFields.group.some((elem) => elem.current === ref.current)\n      ) {\n        dataFields.group.push(ref)\n        delete dataFields.ref\n      }\n    }\n    elements.current.set(name, dataFields)\n  }\n\n  const detectTouch = (ref: RefObject<Basic>) => () => {\n    touchedElements.current.set(ref.current?.name, null)\n    ref.current &&\n      ref.current.removeEventListener('focus', detectTouch(ref), true)\n  }\n\n  return {\n    track: track,\n    submitForm: submitForm,\n    errors: errors.current,\n    formValidity: formValidity.current\n  }\n}\n","import { isEmpty } from './isEmpty'\n\nexport const isEmptyValue = <T>(v: T): boolean => {\n  if (typeof v === 'object' && v !== null) {\n    return isEmpty((v as unknown) as object)\n  }\n  if (typeof v === 'number') {\n    return !(v || v === 0)\n  }\n  if (typeof v === 'string') {\n    return !v.trim()\n  }\n  if (v) {\n    return false\n  }\n  return true\n}\n","import { Basic } from '../types/fields'\n\nexport const hasNameAttribute = (ref: Basic) => {\n  const name = ref.name\n  if (name) {\n    return name\n  } else {\n    console.warn(\n      `the field @ ${ref.outerHTML} must have a unique name attribute`\n    )\n    return undefined\n  }\n}\n"],"names":["isEmpty","o","Array","isArray","length","Object","keys","constructor","a","required","value","trim","email","input","test","minLength","len","console","warn","toString","maxLength","minCheckboxes","availableOptions","checkForValidators","configValidators","builtInValidators","name","rules","customValidators","_rules$customValidato","isRadio","ref","type","isCheckbox","getValue","v","current","checked","group","filter","e","map","getHierarchyProperties","inputOptions","globalOptions","key","_globalOptions","undefined","throwWarning","warning","hasKey","obj","config","elements","useRef","Map","touchedElements","dirtyElements","errors","triedToSubmit","formValidity","shouldRerender","rerender","useState","useEffect","forEach","fieldValidation","elem","_isValid","previousErrorState","get","validators","fieldRules","messages","options","validator","_errors$current","errorMsg","globalMessages","set","valid","_errors$current2","_errors$current2$name","_errors$current3","_errors$current4","_errors$current5","track","createRef","outerHTML","hasNameAttribute","isRadioOrCheckbox","has","some","addEventListener","stopPropagation","validateFormOnSubmit","_ref$current2","t","detectChange","detectTouch","_ref$current5","removeEventListener","_ref$current","detectInput","f","getValidators","dataFields","_ref$current4","push","submitForm","fn","preventDefault","prevFormValidity","size"],"mappings":"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"}